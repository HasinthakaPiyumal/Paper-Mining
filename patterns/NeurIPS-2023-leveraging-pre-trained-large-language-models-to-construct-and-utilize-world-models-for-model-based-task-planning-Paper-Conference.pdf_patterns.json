[
  {
    "Pattern Name": "LLM-Powered Symbolic World Model Engineering",
    "Problem": "Large Language Models (LLMs) often generate incorrect or implausible plans when used directly for complex planning tasks due to limitations in reasoning, handling long-term dependencies, and combinatorial search. Simultaneously, acquiring robust, symbolic world models (e.g., in PDDL) is traditionally labor-intensive and requires specialized knowledge, making it inaccessible to non-experts. Initial LLM-generated symbolic models may also contain errors (syntax or factual) that are difficult for non-PDDL experts to correct directly.",
    "Context": "Developing AI agents for sequential decision-making in domains like robotics or household automation, where plan correctness and reliability are paramount. Users (e.g., robot engineers) possess natural language descriptions of actions and domain constraints but may lack expertise in formal planning languages. The goal is to leverage LLMs' common-world knowledge and natural language understanding to build reliable symbolic models, without relying on their unreliable planning capabilities.",
    "Solution": "The process involves two main phases: \n1.  **Acquisition:** Prompt an LLM (e.g., GPT-4) with detailed instructions, illustrative examples, domain context, natural language descriptions of actions, and a dynamically updated list of predicates. The LLM then generates symbolic representations of actions (e.g., PDDL action models) including their preconditions and effects. This process can be iterative (e.g., generating models action-by-action and then re-running with a full predicate list) to refine the model and leverage LLMs for knowledge acquisition from minimal descriptions.\n2.  **Correction:** Employ the LLM as an intelligent interface between the generated symbolic model and various feedback sources (human experts, PDDL validators). The LLM translates PDDL models and validator error messages into natural language for user comprehension. It then incorporates natural language corrective feedback (e.g., missing effects, syntax errors) back into the PDDL model by continuing the dialogue, effectively concealing the complexity of PDDL from end-users.",
    "Result": "Produces high-quality, correct, and intuitively named symbolic world models (e.g., PDDL domain models) by effectively separating the modeling of causal dependencies (LLM's strength) from the combinatorial search (external planner's strength). This significantly reduces the human involvement and specialized expertise required for symbolic model acquisition and correction, making the process more efficient and accessible. The generated models can then be seamlessly used by sound, domain-independent classical planners, offering correctness guarantees.",
    "Related Patterns": [
      "LLM as Goal Translator",
      "Classical Planner with LLM-Acquired World Model",
      "LLM Planner with Symbolic Validation and Feedback"
    ],
    "Uses": "Robotics (e.g., household robots), general AI agent development requiring robust planning capabilities, knowledge engineering for symbolic AI systems, enabling non-experts to define agent behaviors and causal models."
  },
  {
    "Pattern Name": "LLM as Goal Translator",
    "Problem": "Classical symbolic planners require precise, formal goal specifications (e.g., PDDL goals), but end-users typically provide high-level instructions in natural language. This disparity creates a barrier to accessibility and usability for symbolic planning systems.",
    "Context": "An AI system that utilizes a classical symbolic planner (which demands formal goal input) but is designed to interact with users through natural language commands. A symbolic world model (e.g., PDDL) is already available, defining the predicates and objects relevant to the domain.",
    "Solution": "An LLM is employed to parse and interpret natural language user instructions and translate them into a formal, symbolic goal specification (e.g., a set of PDDL predicates to be achieved). The LLM leverages its natural language understanding capabilities and its knowledge of the defined predicates to accurately represent the user's intent in a machine-readable format suitable for the symbolic planner.",
    "Result": "Bridges the semantic gap between human natural language and formal planning systems, thereby making classical planners more accessible and user-friendly. This allows users to specify complex tasks without needing to learn or understand a formal planning language.",
    "Related Patterns": [
      "LLM-Powered Symbolic World Model Engineering",
      "Classical Planner with LLM-Acquired World Model"
    ],
    "Uses": "Natural language interfaces for robotic control, intelligent assistants, task automation systems, and any application where symbolic planning is used, and user interaction is primarily in natural language."
  },
  {
    "Pattern Name": "Classical Planner with LLM-Acquired World Model",
    "Problem": "Large Language Models (LLMs) struggle with the combinatorial search and correctness guarantees essential for reliable planning in complex, real-world scenarios. They often produce plans that are logically inconsistent, physically impossible, or fail to achieve goals, making them unsuitable for critical applications.",
    "Context": "An AI agent needs to execute plans for complex, long-horizon tasks in a structured environment where reliability is paramount. A robust symbolic world model (e.g., PDDL domain model) has been successfully acquired and refined using LLM-Powered Symbolic World Model Engineering, and user goals are translated into formal specifications by an LLM (LLM as Goal Translator).",
    "Solution": "A standard, robust, and domain-independent classical symbolic planner (e.g., Fast Downward, STRIPS planner) is integrated with the LLM-generated and corrected symbolic world model and the LLM-translated formal goal specifications. The classical planner is exclusively responsible for performing the search through the state space to find a sequence of actions that achieves the goal, leveraging its proven algorithms for optimality or satisficing.",
    "Result": "Generates highly reliable, correct, and executable plans with strong correctness guarantees, effectively overcoming the limitations of direct LLM planning regarding combinatorial search and logical consistency. This pattern successfully combines the natural language understanding and knowledge acquisition strengths of LLMs with the robust, provable planning capabilities of classical AI.",
    "Related Patterns": [
      "LLM-Powered Symbolic World Model Engineering",
      "LLM as Goal Translator"
    ],
    "Uses": "Robotics, automated task execution, complex system control, and any application where plan correctness, logical consistency, and provable execution are critical requirements."
  },
  {
    "Pattern Name": "LLM Planner with Symbolic Validation and Feedback",
    "Problem": "While LLM planners can sometimes capture implicit human preferences or ordering constraints not easily formalized, they frequently generate incorrect, incomplete, or non-executable plans due to a lack of deep causal reasoning and logical consistency. Manually correcting these plans is resource-intensive and impractical for complex tasks.",
    "Context": "An AI system employs an LLM directly as a planner (e.g., using a ReAct-like approach) to leverage its flexibility and ability to incorporate commonsense or implicit user constraints. However, the resulting plans require rigorous validation to ensure their correctness and executability. A reliable symbolic world model (e.g., PDDL) is available, typically acquired through LLM-Powered Symbolic World Model Engineering.",
    "Solution": "The LLM-acquired symbolic world model (e.g., PDDL) is utilized as an inexpensive, high-level 'symbolic simulator' or 'human proxy' to validate plans proposed by the LLM planner. A PDDL validator tool (e.g., VAL) checks the LLM-generated plan against the symbolic model for unmet preconditions or goal conditions. Any validation feedback (e.g., error messages, unmet conditions) is then translated by an LLM into natural language and provided back to the LLM planner through a reprompting mechanism. The LLM planner iteratively refines its plan based on this corrective feedback.",
    "Result": "Significantly improves the correctness and executability of LLM-generated plans by introducing a robust, automated feedback loop. This approach allows the LLM planner to retain its capacity for incorporating implicit preferences and commonsense knowledge while benefiting from the logical consistency checks and correctness guarantees of symbolic AI. It reduces reliance on costly physical simulators or extensive human oversight during plan execution.",
    "Related Patterns": [
      "LLM-Powered Symbolic World Model Engineering"
    ],
    "Uses": "Agentic AI systems, interactive planning where LLMs generate initial plans, scenarios where implicit user preferences are valuable but plan correctness must be ensured, and enhancing the reliability of LLM-driven agents in dynamic environments."
  }
]