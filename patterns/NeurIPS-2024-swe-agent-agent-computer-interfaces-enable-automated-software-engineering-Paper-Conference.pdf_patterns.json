[
  {
    "Pattern Name": "Agent-Computer Interface (ACI)",
    "Problem": "Language Model (LM) agents struggle to reliably interact with general-purpose computer environments (like Linux shell) for complex tasks due to interfaces designed for human users, leading to inefficient actions, poor feedback interpretation, error propagation, and limited performance.",
    "Context": "LM agents tasked with performing complex, multi-step operations in digital environments, such as software engineering tasks (e.g., creating, editing, navigating code, executing tests).",
    "Solution": "Introduce an abstraction layer, the Agent-Computer Interface (ACI), between the LM agent and the computer. This interface is tailored to the LM's needs and abilities, providing a curated set of commands, structured feedback, and built-in guardrails. Key principles include: simple and easy-to-understand actions, compact and efficient actions, informative but concise environment feedback, and mechanisms to manage context and mitigate errors.",
    "Result": "Substantially enhances the LM agent's ability to autonomously use computers, leading to significantly improved performance on complex tasks (e.g., state-of-the-art on SWEbench), increased reliability, and more efficient interaction cycles compared to using human-designed interfaces or non-interactive systems.",
    "Related Patterns": [
      "LM-Friendly Search and Navigation",
      "LM-Centric File Editing with Guardrails",
      "Context Management for Agents"
    ],
    "Uses": "Automated Software Engineering, Digital Environment Control for LM Agents, Interactive Code Generation, Agentic AI System Design."
  },
  {
    "Pattern Name": "LM-Friendly Search and Navigation",
    "Problem": "General-purpose search and navigation tools (e.g., `grep`, `find`, `cd`, `ls`, `cat`) are often too verbose, highly configurable, or require inefficient multi-step compositions for LM agents. This can lead to context window overflow, 'lost in the middle' issues, and inefficient exhaustive search behaviors.",
    "Context": "LM agents needing to efficiently locate relevant files, specific code snippets, or definitions within large codebases to understand issues or plan edits.",
    "Solution": "Provide a set of specialized search and navigation commands (`findfile`, `searchfile`, `searchdir`, `open`, `goto`, `scrolldown`, `scrollup`) that are tailored for LM agents. These commands offer: summarized search results (e.g., max 50 results) with guidance for refining queries, efficient in-file navigation (e.g., jumping to specific lines, scrolling within a limited window), and contextual information (e.g., line numbers, lines omitted) in a simplified, consistent format.",
    "Result": "Improves the agent's ability to perform efficient code localization, reduces the burden on the LM's context window, and enables faster progress towards task goals by providing targeted information.",
    "Related Patterns": [
      "Agent-Computer Interface (ACI)",
      "LM-Centric File Editing with Guardrails",
      "Context Management for Agents"
    ],
    "Uses": "Bug localization, code exploration, understanding codebase structure, automated refactoring."
  },
  {
    "Pattern Name": "LM-Centric File Editing with Guardrails",
    "Problem": "LM agents struggle with direct file modification using traditional tools (e.g., `sed`, redirection) due to their granular, error-prone nature, lack of immediate feedback, and the difficulty of performing multi-line, context-aware edits in a single step. Self-introduced errors (e.g., syntax errors) are common, and recovery is challenging.",
    "Context": "LM agents requiring reliable, efficient, and robust methods to modify code files as part of software engineering tasks (e.g., applying bug fixes, adding features, writing reproduction scripts).",
    "Solution": "Implement a specialized `edit` command, integrated with a file viewer, that: allows replacing a specific range of lines with new content in a single, compact action; automatically displays the updated file content immediately after an edit; and incorporates guardrails like a code linter or syntax checker. Invalid edits are discarded, and the agent receives specific error messages (including before/after snippets) to guide recovery.",
    "Result": "Streamlines the code modification process, significantly reduces the occurrence and propagation of errors, improves the agent's ability to recover from mistakes, and enhances overall performance on code-editing tasks.",
    "Related Patterns": [
      "Agent-Computer Interface (ACI)",
      "LM-Friendly Search and Navigation",
      "Context Management for Agents"
    ],
    "Uses": "Automated program repair, interactive code generation, refactoring, writing test scripts."
  },
  {
    "Pattern Name": "Context Management for Agents",
    "Problem": "Large Language Models have limited context windows and are sensitive to the quantity and relevance of input. In multi-turn agentic interactions, a growing history can lead to 'lost in the middle' performance degradation, increased computational cost, and the presence of outdated or irrelevant information.",
    "Context": "LM agents engaging in long-running, iterative interactions with an environment, where each turn involves generating thoughts and actions based on current instructions and accumulated history.",
    "Solution": "Implement intelligent context management strategies to optimize the information presented to the LM at each turn. This includes: history processing (selectively collapsing or summarizing older observations), informative error messages (specific and concise feedback for malformed generations or silent commands), error denoising (removing malformed generation attempts from history), and structured prompts (system, demonstration, and instance templates to convey task settings and tips).",
    "Result": "Keeps the agent's input concise and relevant, reduces token consumption and inference cost, mitigates the 'lost in the middle' effect, and improves the agent's ability to maintain focus, learn from feedback, and successfully complete long-horizon tasks.",
    "Related Patterns": [
      "Agent-Computer Interface (ACI)",
      "LM-Friendly Search and Navigation",
      "LM-Centric File Editing with Guardrails"
    ],
    "Uses": "Long-horizon agentic tasks, interactive environments, reducing LLM inference cost, improving prompt effectiveness, Agentic AI System Design."
  }
]