[
  {
    "Pattern Name": "Solution Pattern for Machine Learning",
    "Problem": "Organizations struggle to derive business value from ML due to inherent complexities in ML solution development. These complexities include: understanding ML capabilities and limitations, specifying well-defined business cases and translating them into ML problems, data preparation and feature selection, ML algorithm selection and trade-offs, and finding linkages between ML models and business processes. This is compounded by a lack of specialized ML skillset and talent, and insufficient ML knowledge among executives and stakeholders.",
    "Context": "Organizations designing, developing, or deploying ML/ML systems, particularly those facing challenges in bridging the gap between business problems and ML solutions, managing ML development complexities, and needing to enhance design effectiveness, speed up development, and facilitate knowledge transfer. Applicable in \"real-world scenarios\" and \"business process management\" contexts where there's a need to represent generic and well-proven ML designs for recurring business analytics problems.",
    "Solution": "Introduces \"solution patterns\" as an explicit way of representing generic and well-proven ML designs for commonly-known and recurring business analytics problems. A solution pattern is an artifact in the form of a conceptual model, comprised of several parts: \n1.  **Business View:** Actors, Decision Goals, Question Goals, and Insights, which translate a business problem into a set of well-defined ML problems.\n2.  **Analytics View:** Analytics Goals (e.g., Prediction, Classification), Algorithms (e.g., kNearest Neighbor, Naive Bayes, Support Vector Machines), Indicators (ML metrics like Accuracy, Precision), and Softgoals (non-functional requirements like Interpretability, Speed, Tolerance to missing values).\n3.  **Data Preparation View:** Data Preparation Tasks (e.g., Dimensionality Reduction, normalization), Operators, Data Flows, and Entities (datasets).\n4.  **Contexts:** User Contexts (user preferences, e.g., desire for algorithm simplicity), Data Contexts (data characteristics, e.g., feature independence, dataset noise), and Model Contexts (algorithm configurations, e.g., parameter tuning). These define applicability conditions.\n5.  **Parameters:** Configuration values required as input by an Algorithm.\nThe solution is supported by a prototype architecture with components like Pattern Repository, Data Extractor, Context Analyzer (User, Data, Model Context Monitors), Quality Evaluator, Workflow Planner, Data Preparator, and Data Miner, providing semi-automated support for using these patterns.",
    "Result": "1.  Positive impact on ML design and development efforts. \n2.  Organizes, stores, and presents knowledge on various aspects of ML solution design, providing reusable answers to critical ML development questions. \n3.  Enables efficient transfer of ML design knowledge among developers, helping new teams quickly acquire ML expertise. \n4.  Potentially reduces time and cost of ML development efforts by providing proven starting points and simplifying the coding phase. \n5.  Constrains the solution space into a narrower scope based on critical quality requirements and verified contexts. \n6.  Offers convenient and easy-to-understand visual representations of ML design. \n7.  Leads to metamodel enhancements, such as the classification of Context elements into Data, User, and Model Context subtypes.",
    "Related Patterns": [
      "**Best practices catalogues and patterns for analytics and ML solution development (e.g., Chen et al., Sculley et al., Zinkevich, Breck et al.):** Solution patterns differ by offering a more explicit and systematic way to represent business requirements and link them to relevant ML algorithms, while capturing user, data, and model contexts.",
      "**Machine learning services on cloud platforms (e.g., Microsoft Azure ML Studio, Google Cloud AI, Amazon SageMaker):** Solution patterns are distinct in that business questions and decisions play a critical role in deriving solution design, integrating quality requirements, user preferences, data characteristics, and parameter configurations into the design process.",
      "**Data mining formal ontologies (e.g., Keet et al., Vanschoren):** Unlike these ontologies, solution patterns start from business decisions and questions, linking them to alternative ML algorithms and data preparation techniques while explicitly considering quality requirements.",
      "**Software design patterns (e.g., Buschmann et al.):** Solution patterns are more problem-domain specific and less generic than classical software design patterns. They are conceptually closer to a working solution, intended for adopters to use as a starting point for implementation."
    ],
    "Uses": [
      "MLOps Patterns",
      "Knowledge & Reasoning Patterns",
      "AIâ€“Human Interaction Patterns",
      "Tools Integration Patterns"
    ]
  }
]